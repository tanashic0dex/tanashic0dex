function clear(authToken, authorId, channelId) {
  const wait = async ms => new Promise(done => setTimeout(done, ms));

  const headers = {
    Authorization: authToken
  };

  const recurse = before => {
    let params = before ? `?before=${before}` : ``;

    request({
        url: `https://discord.com/api/v9/channels/${channelId}/messages${params}`,
        headers: headers,
        json: true
      },
      async (error, response, result) => {
        if (response === undefined) {
          return recurse(before);
        }

        if (response.statusCode === 202) {
          const w = response.retry_after;

          console.log(
            `     [X] Ops, canal não indexado, aguarde ${w} ms para indexar as mensagens.`
            .red
          );

          await wait(w);

          return recurse(before);
        }

        if (response.statusCode !== 200) {
          return console.log("     [!] Aguardando API!".blue, result);
        }

        for (let i in result) {
          let message = result[i];

          if (message.author.id === authorId && message.type !== 3) {
            await new Promise(resolve => {
              const deleteRecurse = () => {
                request.delete({
                    url: `https://discord.com/api/v9/channels/${channelId}/messages/${message.id}`,
                    headers: headers,
                    json: true
                  },
                  async (error, response, result) => {
                    if (error) {
                      return deleteRecurse();
                    }
                    if (result) {
                      if (result.retry_after !== undefined) {
                        console.log(
                          `     [$] Rate-limited! Espere ${result.retry_after} ms para continuar a limpeza.`
                        );
                        await wait(result.retry_after * 1000);
                        return deleteRecurse();
                      }
                    }

                    resolve();
                  }
                );
              };

              deleteRecurse();
            });
          }
        }

        if (result.length === 0) {
          console.clear();
          printClear();
          console.log(
            `     [@] Peguei vocês!!
                `.magenta
          );
        } else {
          recurse(result[result.length - 1].id);
        }
      }
    );
  };

  recurse();
}

client.on("ready", async () => {
  console.clear();
  process.title = `TanashiClean | Conectado na conta: ${client.user.username}`;
  printClear();
});

client.on("message", async message => {
  if (message.author.id != client.user.id) return;
  if (message.content.toLowerCase() === gatilho) {
    message.delete();
    clear(token, client.user.id, message.channel.id);
    console.log(
      `     [V] Gatilho detectado - Iniciando o processo de limpeza ....`.green
    );
  }
});

client.on("warn", () => {});
client.on("error", () => {});

client.login(token).catch(err => {
  console.log(`     > Um token invalido foi usado`.red);
  console.log(`     > Motivo Real:  ${err}`.red);
